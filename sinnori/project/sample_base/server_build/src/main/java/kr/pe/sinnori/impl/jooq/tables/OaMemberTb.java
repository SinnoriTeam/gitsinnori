/*
 * This file is generated by jOOQ.
*/
package kr.pe.sinnori.impl.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kr.pe.sinnori.impl.jooq.Indexes;
import kr.pe.sinnori.impl.jooq.Keys;
import kr.pe.sinnori.impl.jooq.SbDb;
import kr.pe.sinnori.impl.jooq.tables.records.OaMemberTbRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OaMemberTb extends TableImpl<OaMemberTbRecord> {

    private static final long serialVersionUID = 282271379;

    /**
     * The reference instance of <code>SB_DB.OA_MEMBER_TB</code>
     */
    public static final OaMemberTb OA_MEMBER_TB = new OaMemberTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OaMemberTbRecord> getRecordType() {
        return OaMemberTbRecord.class;
    }

    /**
     * The column <code>SB_DB.OA_MEMBER_TB.id</code>.
     */
    public final TableField<OaMemberTbRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>SB_DB.OA_MEMBER_TB.pwd</code>.
     */
    public final TableField<OaMemberTbRecord, String> PWD = createField("pwd", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>SB_DB.OA_MEMBER_TB.email</code>.
     */
    public final TableField<OaMemberTbRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>SB_DB.OA_MEMBER_TB.phone</code>.
     */
    public final TableField<OaMemberTbRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>SB_DB.OA_MEMBER_TB.regdate</code>.
     */
    public final TableField<OaMemberTbRecord, Timestamp> REGDATE = createField("regdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>SB_DB.OA_MEMBER_TB</code> table reference
     */
    public OaMemberTb() {
        this(DSL.name("OA_MEMBER_TB"), null);
    }

    /**
     * Create an aliased <code>SB_DB.OA_MEMBER_TB</code> table reference
     */
    public OaMemberTb(String alias) {
        this(DSL.name(alias), OA_MEMBER_TB);
    }

    /**
     * Create an aliased <code>SB_DB.OA_MEMBER_TB</code> table reference
     */
    public OaMemberTb(Name alias) {
        this(alias, OA_MEMBER_TB);
    }

    private OaMemberTb(Name alias, Table<OaMemberTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private OaMemberTb(Name alias, Table<OaMemberTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SbDb.SB_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OA_MEMBER_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OaMemberTbRecord> getPrimaryKey() {
        return Keys.KEY_OA_MEMBER_TB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OaMemberTbRecord>> getKeys() {
        return Arrays.<UniqueKey<OaMemberTbRecord>>asList(Keys.KEY_OA_MEMBER_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OaMemberTb as(String alias) {
        return new OaMemberTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OaMemberTb as(Name alias) {
        return new OaMemberTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OaMemberTb rename(String name) {
        return new OaMemberTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OaMemberTb rename(Name name) {
        return new OaMemberTb(name, null);
    }
}
