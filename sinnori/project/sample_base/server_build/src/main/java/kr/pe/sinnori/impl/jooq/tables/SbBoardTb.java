/*
 * This file is generated by jOOQ.
*/
package kr.pe.sinnori.impl.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kr.pe.sinnori.impl.jooq.Indexes;
import kr.pe.sinnori.impl.jooq.Keys;
import kr.pe.sinnori.impl.jooq.SbDb;
import kr.pe.sinnori.impl.jooq.tables.records.SbBoardTbRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SbBoardTb extends TableImpl<SbBoardTbRecord> {

    private static final long serialVersionUID = 410939622;

    /**
     * The reference instance of <code>SB_DB.SB_BOARD_TB</code>
     */
    public static final SbBoardTb SB_BOARD_TB = new SbBoardTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SbBoardTbRecord> getRecordType() {
        return SbBoardTbRecord.class;
    }

    /**
     * The column <code>SB_DB.SB_BOARD_TB.board_no</code>. 글 번호
     */
    public final TableField<SbBoardTbRecord, UInteger> BOARD_NO = createField("board_no", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "글 번호");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.group_no</code>. 그룹 번호
     */
    public final TableField<SbBoardTbRecord, UInteger> GROUP_NO = createField("group_no", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "그룹 번호");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.group_sq</code>. 그룹 즉 동일한 그룹 번호(=group_no)  에서의 순번
     */
    public final TableField<SbBoardTbRecord, UShort> GROUP_SQ = createField("group_sq", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "그룹 즉 동일한 그룹 번호(=group_no)  에서의 순번");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.parent_no</code>. 부모 글 번호,  부모가 없는 경우  다른 말로 댓글 깊이가 0 인 글은 0 값을 갖는다.
     */
    public final TableField<SbBoardTbRecord, UInteger> PARENT_NO = createField("parent_no", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "부모 글 번호,  부모가 없는 경우  다른 말로 댓글 깊이가 0 인 글은 0 값을 갖는다.");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.depth</code>. 트리 깊이,  0 부터 시작하며 트리 깊이가 0 일 경우 최상위 글로써 최상위 글을 기준으로 이후 댓글이 달린다. 자식 글의 댓글 깊이는 부모 글의 댓글 깊이보다 1 이 크다.
     */
    public final TableField<SbBoardTbRecord, UByte> DEPTH = createField("depth", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "트리 깊이,  0 부터 시작하며 트리 깊이가 0 일 경우 최상위 글로써 최상위 글을 기준으로 이후 댓글이 달린다. 자식 글의 댓글 깊이는 부모 글의 댓글 깊이보다 1 이 크다.");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.board_id</code>. 게시판 종류 식별자, 어떤 게시판인지 설명하는 게시판 정보(board_info) 테이블을 바라본다.
     */
    public final TableField<SbBoardTbRecord, UByte> BOARD_ID = createField("board_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "게시판 종류 식별자, 어떤 게시판인지 설명하는 게시판 정보(board_info) 테이블을 바라본다.");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.writer_id</code>. 작성자
     */
    public final TableField<SbBoardTbRecord, String> WRITER_ID = createField("writer_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "작성자");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.subject</code>. 제목
     */
    public final TableField<SbBoardTbRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.VARCHAR(255), this, "제목");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.content</code>. 본문
     */
    public final TableField<SbBoardTbRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "본문");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.attach_id</code>.
     */
    public final TableField<SbBoardTbRecord, UInteger> ATTACH_ID = createField("attach_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.view_cnt</code>. 조회수
     */
    public final TableField<SbBoardTbRecord, Integer> VIEW_CNT = createField("view_cnt", org.jooq.impl.SQLDataType.INTEGER, this, "조회수");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.del_fl</code>. Y : 삭제된 게시글, N : 삭제 되지 않은 정상 게시글
     */
    public final TableField<SbBoardTbRecord, String> DEL_FL = createField("del_fl", org.jooq.impl.SQLDataType.CHAR(1), this, "Y : 삭제된 게시글, N : 삭제 되지 않은 정상 게시글");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.ip</code>.
     */
    public final TableField<SbBoardTbRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.reg_dt</code>. 최초 작성일
     */
    public final TableField<SbBoardTbRecord, Timestamp> REG_DT = createField("reg_dt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "최초 작성일");

    /**
     * The column <code>SB_DB.SB_BOARD_TB.mod_dt</code>. 최근 수정일
     */
    public final TableField<SbBoardTbRecord, Timestamp> MOD_DT = createField("mod_dt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "최근 수정일");

    /**
     * Create a <code>SB_DB.SB_BOARD_TB</code> table reference
     */
    public SbBoardTb() {
        this(DSL.name("SB_BOARD_TB"), null);
    }

    /**
     * Create an aliased <code>SB_DB.SB_BOARD_TB</code> table reference
     */
    public SbBoardTb(String alias) {
        this(DSL.name(alias), SB_BOARD_TB);
    }

    /**
     * Create an aliased <code>SB_DB.SB_BOARD_TB</code> table reference
     */
    public SbBoardTb(Name alias) {
        this(alias, SB_BOARD_TB);
    }

    private SbBoardTb(Name alias, Table<SbBoardTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private SbBoardTb(Name alias, Table<SbBoardTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SbDb.SB_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SB_BOARD_TB_FK_TW_BOARD_03_IDX, Indexes.SB_BOARD_TB_PRIMARY, Indexes.SB_BOARD_TB_TW_BOARD_01_IDX, Indexes.SB_BOARD_TB_TW_BOARD_02_IDX, Indexes.SB_BOARD_TB_TW_BOARD_03_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SbBoardTbRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_SB_BOARD_TB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SbBoardTbRecord> getPrimaryKey() {
        return Keys.KEY_SB_BOARD_TB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SbBoardTbRecord>> getKeys() {
        return Arrays.<UniqueKey<SbBoardTbRecord>>asList(Keys.KEY_SB_BOARD_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SbBoardTbRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SbBoardTbRecord, ?>>asList(Keys.FK_SB_BOARD_02, Keys.FK_SB_BOARD_01, Keys.FK_SB_BOARD_03);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SbBoardTb as(String alias) {
        return new SbBoardTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SbBoardTb as(Name alias) {
        return new SbBoardTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SbBoardTb rename(String name) {
        return new SbBoardTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SbBoardTb rename(Name name) {
        return new SbBoardTb(name, null);
    }
}
