/*
 * This file is generated by jOOQ.
*/
package kr.pe.sinnori.impl.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kr.pe.sinnori.impl.jooq.Indexes;
import kr.pe.sinnori.impl.jooq.Keys;
import kr.pe.sinnori.impl.jooq.SbDb;
import kr.pe.sinnori.impl.jooq.tables.records.SbSeqManagerTbRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SbSeqManagerTb extends TableImpl<SbSeqManagerTbRecord> {

    private static final long serialVersionUID = -547338444;

    /**
     * The reference instance of <code>SB_DB.SB_SEQ_MANAGER_TB</code>
     */
    public static final SbSeqManagerTb SB_SEQ_MANAGER_TB = new SbSeqManagerTb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SbSeqManagerTbRecord> getRecordType() {
        return SbSeqManagerTbRecord.class;
    }

    /**
     * The column <code>SB_DB.SB_SEQ_MANAGER_TB.sq_type_id</code>. 시퀀스 종류 식별자, 1:업로드 파일 이름 시퀀스
     */
    public final TableField<SbSeqManagerTbRecord, UByte> SQ_TYPE_ID = createField("sq_type_id", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "시퀀스 종류 식별자, 1:업로드 파일 이름 시퀀스");

    /**
     * The column <code>SB_DB.SB_SEQ_MANAGER_TB.sq_value</code>.
     */
    public final TableField<SbSeqManagerTbRecord, UInteger> SQ_VALUE = createField("sq_value", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>SB_DB.SB_SEQ_MANAGER_TB.sq_type_name</code>.
     */
    public final TableField<SbSeqManagerTbRecord, String> SQ_TYPE_NAME = createField("sq_type_name", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * Create a <code>SB_DB.SB_SEQ_MANAGER_TB</code> table reference
     */
    public SbSeqManagerTb() {
        this(DSL.name("SB_SEQ_MANAGER_TB"), null);
    }

    /**
     * Create an aliased <code>SB_DB.SB_SEQ_MANAGER_TB</code> table reference
     */
    public SbSeqManagerTb(String alias) {
        this(DSL.name(alias), SB_SEQ_MANAGER_TB);
    }

    /**
     * Create an aliased <code>SB_DB.SB_SEQ_MANAGER_TB</code> table reference
     */
    public SbSeqManagerTb(Name alias) {
        this(alias, SB_SEQ_MANAGER_TB);
    }

    private SbSeqManagerTb(Name alias, Table<SbSeqManagerTbRecord> aliased) {
        this(alias, aliased, null);
    }

    private SbSeqManagerTb(Name alias, Table<SbSeqManagerTbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SbDb.SB_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SB_SEQ_MANAGER_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SbSeqManagerTbRecord> getPrimaryKey() {
        return Keys.KEY_SB_SEQ_MANAGER_TB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SbSeqManagerTbRecord>> getKeys() {
        return Arrays.<UniqueKey<SbSeqManagerTbRecord>>asList(Keys.KEY_SB_SEQ_MANAGER_TB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SbSeqManagerTb as(String alias) {
        return new SbSeqManagerTb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SbSeqManagerTb as(Name alias) {
        return new SbSeqManagerTb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SbSeqManagerTb rename(String name) {
        return new SbSeqManagerTb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SbSeqManagerTb rename(Name name) {
        return new SbSeqManagerTb(name, null);
    }
}
