<project name="sample_test_server" default="compile.appinf" basedir=".">
	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="APP-INF" location="APP-INF" />
	<property name="dist" location="dist" />
	<property name="corelib" location="corelib" />
	<property name="lib" location="lib" />
	<property name="core.build" location="../../../core_build" />
	<property file="../ant.properties" />
	
	<condition property="is.windows.yes">
		<os family="windows" />
	</condition>
	<condition property="is.unix.yes">
		<os family="unix" />
	</condition>
	
	<condition property="java.debug.yes">
		<istrue value="${java.debug}" />
	</condition>
	
	<target name="java.debug.yes.init" if="java.debug.yes" description="the sinnori core compile including debug info">
		<property name="core.java.debug" value="debug" />
	</target>
	
	<target name="java.debug.no.init" unless="java.debug.yes" description="the sinnori core compile without debug info">
		<property name="core.java.debug" value="nodebug" />
	</target>
	
	<target name="dos.init" if="is.windows.yes">
		<property name="weblib" location="${dos.weblib}" />
	</target>
	<target name="unix.init" if="is.unix.yes">
		<property name="weblib" location="${unix.weblib}" />
	</target>
	
	<target name="var.init" depends="java.debug.no.init, java.debug.yes.init, dos.init, unix.init" description="var init">
		<echo message="java.debug=${java.debug}, core.java.debug=${core.java.debug}" />
		<echo message="java.debug.yes=${java.debug.yes}" />
	</target>

  <target name="init.directory" depends="var.init" description="directory init for ant compile envoroment">
		<echo message="directory init for ant compile envoroment" />
		<mkdir dir="${corelib}/ex" />
		<mkdir dir="${corelib}/in" />
		<mkdir dir="${lib}/ex" />
		<mkdir dir="${lib}/in" />
		<mkdir dir="${APP-INF}/classes" />
		<mkdir dir="${APP-INF}/lib" />
		<mkdir dir="${APP-INF}/resources" />
	</target>
	
	<target name="unix.make.core" if="is.unix.yes">
		<echo message="make sinnori core jar file in Unix OS" />
		<exec dir="${core.build}" executable="ant">
			<arg value="${core.java.debug}" />
		</exec>
	</target>
	
	<target name="dos.make.core" if="is.windows.yes">
		<echo message="make sinnori core jar file in Microsoft Windows OS" />
		<exec dir="${core.build}" executable="cmd">
			<arg value="/c" />
			<arg value="ant.bat" />
			<arg value="${core.java.debug}" />
		</exec>
	</target>

	<target name="make.core" depends="init.directory, dos.make.core, unix.make.core" description="make sinnori core jar file" />
	
	<target name="clean.corelib" depends="make.core">
		<delete dir="${corelib}" />
	</target>

	<target name="init.corelib" depends="clean.corelib">
		<!-- Create the time stamp -->
		<tstamp />
		<mkdir dir="${corelib}/ex" />
		<mkdir dir="${corelib}/in" />
	</target>
	
	<target name="copy.core" description="sinnori framework core copy" depends="init.corelib">
		<copy todir="${corelib}/in" verbose="true" overwrite="true">
			<fileset file="${core.build}/dist/sinnori-core.jar" />
		</copy>
		<copy todir="${corelib}/ex" verbose="true" overwrite="true">
			<fileset dir="${core.build}/lib/ex/" />
		</copy>		
	</target>
	
	<target name="copy.appinf" depends="copy.core" description="copy server APP-INF's library, common source files and resources">
	  <!-- core resoruces only sample so no copy -->
		<mkdir dir="${APP-INF}/resources" />
		
		<delete dir="${APP-INF}/lib" />
		<mkdir dir="${APP-INF}/lib" />
		<copy todir="${APP-INF}/lib" verbose="true" overwrite="true">
			<fileset dir="${core.build}/APP-INF/lib/" />
		</copy>

    <!-- APP-INF/classes init, this direcotry has the server dynamic classes -->
		<delete dir="${APP-INF}/classes" />
		<mkdir dir="${APP-INF}/classes" />

    <!-- Except for the sample class file that inherits the UnpooledDataSourceFactory class and gets a db connection pool from the DBCPManager class -->
		<copy todir="${src}/kr/pe/sinnori/impl/server/mybatis/" verbose="true" overwrite="true">
		  <!-- the SqlSessionFactoryManger class depends on the server dynimic class loader -->
			<fileset file="${core.build}/APP-INF/src/kr/pe/sinnori/impl/server/mybatis/SqlSessionFactoryManger.java" />
		</copy>
	</target>
	
	<target name="sinnori" depends="copy.appinf" description="copy sinnori core after making the sinnori core jar file">
		<echo message="copy the sinnori core jar file after making the sinnori core jar file" />
	</target>

	<target name="clean.main" depends="sinnori">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
	</target>
	
	<target name="init.main" depends="clean.main">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile.main" depends="init.main" description="compile server main class">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="${java.debug}" debuglevel="lines,vars,source" encoding="UTF-8" includeantruntime="false" srcdir="${src}" destdir="${build}">
			<include name="main/**" />
			<classpath>
				<fileset dir="${corelib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${corelib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${APP-INF}/lib">
					<include name="**/*.jar" />
				</fileset>
				<!-- pathelement path="${APP-INF}/classes" / -->
			</classpath>
		</javac>
		<echo message="compile.main" />
	</target>


	<path id="build.classpath">
		<fileset dir="${basedir}">
			<include name="corelib/ex/*.jar"/>
			<include name="lib/ex/*.jar"/>
		</fileset>
	</path>

	<pathconvert property="manifest.classpath" pathsep=" ">
	  <path refid="build.classpath"/>
	  <mapper>
		<chainedmapper>
		   <flattenmapper/>
		   <globmapper from="*.jar" to="lib/*.jar"/>
		</chainedmapper>
	  </mapper>
	</pathconvert>

	<target name="copy.lib" depends="compile.main" description="copy jar library">
		<delete dir="${dist}" />
		<mkdir dir="${dist}/lib" />		

		<copy todir="${dist}/lib" verbose="true" overwrite="true">
			<fileset dir="${corelib}/ex" />
			<fileset dir="${lib}/ex" />
		</copy>
	</target>

<target name="clean.serverlib" depends="copy.lib">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}/serverlib" />
	</target>
	
	<target name="init.serverlib" depends="clean.main">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}/serverlib" />
	</target>

	<target name="compile.serverlib" depends="init.serverlib" description="compile the server library">
		<javac debug="${java.debug}" debuglevel="lines,vars,source" encoding="UTF-8" includeantruntime="false" srcdir="${src}" destdir="${build}/serverlib" >		
			<include name="kr/pe/sinnori/common/serverlib/**" />	
			<classpath>
				<fileset dir="${corelib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${corelib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${APP-INF}/lib">
					<include name="**/*.jar" />
				</fileset>
				<!-- pathelement path="${APP-INF}/classes" / -->
			</classpath>
		</javac>
	</target>

	<target name="make.serverlib" depends="compile.serverlib" description="make the server library jar file">
		<echo message="${build}/serverlib" />	
		<jar jarfile="${lib}/in/sinnori-serverlib.jar" basedir="${build}/serverlib">
			<restrict>
				<name name="**/*.class" />
				<archives>
					<!-- 서버 라이브러리는 단독으로 존재하므로 외부 라이브러리 포함등 없음 -->
				</archives>
			</restrict>
		</jar>
	</target>
	
	<target name="make.main" depends="make.serverlib" description="make the server executable jar file">
		<jar destfile="${dist}/SinnoriServerMain.jar" basedir="${build}">
			<include name="main/**" />
			<restrict>
				<name name="**/*.class" />
				<archives>
					<zips>
						<fileset dir="${corelib}/in" includes="**/*.jar" />
						<fileset dir="${lib}/in" includes="**/*.jar" />
					</zips>
				</archives>
			</restrict>
			<manifest>
				<attribute name="Main-Class" value="main.SinnoriServerMain" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="compile.appinf" depends="init.directory" description="only compile the server business logic classes">
		<javac debug="${java.debug}" debuglevel="lines,vars,source" encoding="UTF-8" includeantruntime="false" srcdir="${src}" destdir="${APP-INF}/classes" >
			<include name="kr/pe/sinnori/impl/**" />
			<classpath>
				<fileset dir="${corelib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${corelib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${APP-INF}/lib">
					<include name="**/*.jar" />
				</fileset>
				<!-- pathelement path="${APP-INF}/classes" / -->
			</classpath>
		</javac>
		<echo message="compile.appinf, is.windows.yes=${is.windows.yes}, is.unix.yes=${is.unix.yes}, java.debug=${java.debug}" />
	</target>
	
	<target name="all" depends="make.main, compile.appinf" description="all work">
		<echo message="is.windows.yes=${is.windows.yes}, is.unix.yes=${is.unix.yes}, java.debug=${java.debug}, core.java.debug=${core.java.debug}" />
	</target>

</project>

