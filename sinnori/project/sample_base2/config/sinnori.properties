#Project[sample_base2]'s Config File
#Sat Sep 05 10:38:09 KST 2015
dbcp.connection_pool_name_list.desc=dbcp 연결 폴 이름 목록, 구분자 콤마
dbcp.connection_pool_name_list.value=
servlet_jsp.jdf_error_message_page.desc=JDF framework 에서 에러 발생시 에러 내용을 보여주는 사용자 친화적인 화면을 전담할 jsp, \ndefaultValue[/errorMessagePage.jsp]
servlet_jsp.jdf_error_message_page.value=/errorMessagePage.jsp
servlet_jsp.jdf_login_page.desc=로그인 처리 jsp, \ndefaultValue[/login.jsp]
servlet_jsp.jdf_login_page.value=/login.jsp
servlet_jsp.jdf_servlet_trace.desc=JDF framework에서 서블릿 경과시간 추적 여부, \ndefaultValue[true], single set {true, false}
servlet_jsp.jdf_servlet_trace.value=true
servlet_jsp.web_layout_control_page.desc=신놀이 웹 사이트의 레이아웃 컨트롤러 jsp, \ndefaultValue[/PageJump.jsp]
servlet_jsp.web_layout_control_page.value=/PageJump.jsp
sessionkey.rsa_keypair_source.desc=세션키에 사용되는 공개키 키쌍 생성 방법, API\:자체 암호 lib 이용하여 RSA 키쌍 생성, \nFile\:외부 파일를 읽어와서 RSA  키쌍을 생성, \ndefaultValue[API], single set {API, File}
sessionkey.rsa_keypair_source.value=API
sessionkey.rsa_keypair_path.desc=세션키에 사용되는 공개키 키쌍 파일 경로, \n세션키에 사용되는 공개키 키쌍 생성 방법이 File인 경우에 유효하다., \ndefaultValue[D\:\\gitsinnori\\sinnori\\project\\sample_base2\\rsa_keypair]
sessionkey.rsa_keypair_path.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/rsa_keypair
sessionkey.rsa_keysize.desc=세션키에 사용하는 공개키 크기, 단위 byte, \ndefaultValue[1024], single set {2048, 512, 1024}
sessionkey.rsa_keysize.value=1024
sessionkey.symmetric_key_algorithm.desc=세션키에 사용되는 대칭키 알고리즘, \ndefaultValue[AES], single set {DES, DESede, AES}
sessionkey.symmetric_key_algorithm.value=AES
sessionkey.symmetric_key_size.desc=세션키에 사용되는 대칭키 크기, \ndefaultValue[16], single set {24, 16, 8}
sessionkey.symmetric_key_size.value=16
sessionkey.iv_size.desc=세션키에 사용되는 대칭키와 같이 사용되는 IV 크기, \ndefaultValue[16], single set {24, 16, 8}
sessionkey.iv_size.value=16
sessionkey.private_key.encoding.desc=개인키를 인코딩 방법, 웹의 경우 이진데이터는 폼 전송이 불가하므로 base64 인코딩하여 전송한다., \ndefaultValue[BASE64], single set {BASE64, NONE}
sessionkey.private_key.encoding.value=BASE64
common.updownfile.local_source_file_resource_cnt.desc=로컬 원본 파일 자원 갯수, \ndefaultValue[10], min[1], max[2147483647]
common.updownfile.local_source_file_resource_cnt.value=10
common.updownfile.local_target_file_resource_cnt.desc=로컬 목적지 파일 자원 갯수, \ndefaultValue[10], min[1], max[2147483647]
common.updownfile.local_target_file_resource_cnt.value=10
common.updownfile.file_block_max_size.desc=파일 송수신 파일 블락 최대 크기, 1024 배수, 단위 byte, \ndefaultValue[1048576], min[1024], max[2147483647]
common.updownfile.file_block_max_size.value=1048576
common.cached_object.max_size.desc=싱글턴 클래스 객체 캐쉬 관리자(LoaderAndName2ObjectManager) 에서 캐쉬로 관리할 객체의 최대 갯수.\n 주로 캐쉬되는 대상 객체는 xxxServerCodec, xxxClientCodec 이다., \ndefaultValue[100], min[1], max[2147483647]
common.cached_object.max_size.value=100
project.name_list.value=sample_base2
project.sample_base2.common.message_info.xmlpath.desc=메시지 정보 파일 경로, \ndefaultValue[D\:\\gitsinnori\\sinnori\\project\\sample_base2\\impl\\message\\info]
project.sample_base2.common.message_info.xmlpath.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/impl/message/info
project.sample_base2.common.host.desc=클라이언트에서 접속할 서버 주소, \ndefaultValue[localhost]
project.sample_base2.common.host.value=localhost
project.sample_base2.common.port.desc=포트 번호, \ndefaultValue[9090], min[1024], max[2147483647]
project.sample_base2.common.port.value=9090
project.sample_base2.common.byteorder.desc=바이트 오더, \ndefaultValue[LITTLE_ENDIAN], single set {LITTLE_ENDIAN, BIG_ENDIAN}
project.sample_base2.common.byteorder.value=LITTLE_ENDIAN
project.sample_base2.common.charset.desc=문자셋, \ndefaultValue[UTF-8]
project.sample_base2.common.charset.value=UTF-8
project.sample_base2.common.data_packet_buffer_max_cnt_per_message.desc=1개 메시지당 할당 받을 수 있는 데이터 패킷 버퍼 최대수, \ndefaultValue[1000], min[1], max[2147483647]
project.sample_base2.common.data_packet_buffer_max_cnt_per_message.value=1000
project.sample_base2.common.data_packet_buffer_size.desc=데이터 패킷 버퍼 크기, 단위 byte, \ndefaultValue[4096], min[1024], max[2147483647]
project.sample_base2.common.data_packet_buffer_size.value=4096
project.sample_base2.common.message_id_fixed_size.desc=메시지 식별자 크기의 최소 크기, \ndefaultValue[50], min[7], max[2147483647]
project.sample_base2.common.message_id_fixed_size.value=50
project.sample_base2.common.message_protocol.desc=메시지 프로토콜, DHB\:교차 md5 헤더+바디, DJSON\:길이+존슨문자열, THB\:길이+바디, \ndefaultValue[DHB], single set {DJSON, DHB, THB}
project.sample_base2.common.message_protocol.value=DHB
project.sample_base2.common.classloader.class_package_prefix_name.desc=동적 클래스 패키지명 접두어, 동적 클래스 여부를 판단하는 기준, \ndefaultValue[kr.pe.sinnori.impl.]
project.sample_base2.common.classloader.class_package_prefix_name.value=kr.pe.sinnori.impl.
project.sample_base2.client.monitor.time_interval.desc=모니터링 주기, 단위 ms, \ndefaultValue[5000], min[1000], max[2147483647]
project.sample_base2.client.monitor.time_interval.value=5000
project.sample_base2.client.monitor.reception_timeout.desc=데이터를 수신하지 않고 기다려주는 최대 시간, 권장 값은 소켓 타임 아웃 시간*2, 단위 ms, \ndefaultValue[20000], min[1000], max[2147483647]
project.sample_base2.client.monitor.reception_timeout.value=20000
project.sample_base2.client.connection.type.desc=소캣 랩퍼 클래스인 연결 종류, NoShareAsyn\:비공유+비동기, \nShareAsyn\:공유+비동기, NoShareSync\:비공유+동기, \ndefaultValue[NoShareAsyn], single set {NoShareAsyn, ShareAsyn, NoShareSync}
project.sample_base2.client.connection.type.value=NoShareAsyn
project.sample_base2.client.connection.socket_timeout.desc=소켓 타임아웃, 단위 ms, \ndefaultValue[5000], min[1000], max[2147483647]
project.sample_base2.client.connection.socket_timeout.value=5000
project.sample_base2.client.connection.whether_to_auto_connect.desc=연결 생성시 자동 접속 여부, \ndefaultValue[false], single set {true, false}
project.sample_base2.client.connection.whether_to_auto_connect.value=false
project.sample_base2.client.connection.count.desc=연결 갯수, \ndefaultValue[4], min[1], max[2147483647]
project.sample_base2.client.connection.count.value=4
project.sample_base2.client.data_packet_buffer_cnt.desc=클라이언트 프로젝트가 가지는 데이터 패킷 버퍼 갯수, \ndefaultValue[1000], min[1], max[2147483647]
project.sample_base2.client.data_packet_buffer_cnt.value=1000
project.sample_base2.client.asyn.finish_connect.max_call.desc=클라이언트 비동기 소켓 채널의 연결 확립 최대 시도 횟수, \ndefaultValue[10], min[1], max[2147483647]
project.sample_base2.client.asyn.finish_connect.max_call.value=10
project.sample_base2.client.asyn.finish_connect.waitting_time.desc=클라이언트 비동기 소켓 채널의 연결 확립을 재 시도 간격, \ndefaultValue[10], min[0], max[2147483647]
project.sample_base2.client.asyn.finish_connect.waitting_time.value=10
project.sample_base2.client.asyn.output_message_executor_thread_cnt.desc=비동기 출력 메시지 처리자 쓰레드 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.client.asyn.output_message_executor_thread_cnt.value=1
project.sample_base2.client.asyn.share.mailbox_cnt.desc=비동기+공유 연결 클래스(ShareAsynConnection)의 메일함 갯수, \ndefaultValue[2], min[1], max[2147483647]
project.sample_base2.client.asyn.share.mailbox_cnt.value=2
project.sample_base2.client.asyn.input_message_queue_size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 큐 크기, \ndefaultValue[10], min[1], max[2147483647]
project.sample_base2.client.asyn.input_message_queue_size.value=10
project.sample_base2.client.asyn.input_message_writer.max_size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 쓰기 담당 쓰레드 최대 갯수, \ndefaultValue[2], min[1], max[2147483647]
project.sample_base2.client.asyn.input_message_writer.max_size.value=2
project.sample_base2.client.asyn.input_message_writer.size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 쓰기 담당 쓰레드 갯수, \ndefaultValue[2], min[1], max[2147483647]
project.sample_base2.client.asyn.input_message_writer.size.value=2
project.sample_base2.client.asyn.output_message_queue_size.desc=출력 메시지 큐 크기, \ndefaultValue[10], min[1], max[2147483647]
project.sample_base2.client.asyn.output_message_queue_size.value=10
project.sample_base2.client.asyn.output_message_reader.max_size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 읽기 담당 쓰레드 최대 갯수, \ndefaultValue[4], min[1], max[2147483647]
project.sample_base2.client.asyn.output_message_reader.max_size.value=4
project.sample_base2.client.asyn.output_message_reader.size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 읽기 담당 쓰레드 갯수, \ndefaultValue[4], min[1], max[2147483647]
project.sample_base2.client.asyn.output_message_reader.size.value=4
project.sample_base2.client.asyn.read_selector_wakeup_interval.desc=클라이언트 비동기 입출력 지원용 출력 메시지 소켓 읽기 담당 쓰레드에서 블락된 읽기 이벤트 전용 selector 를 깨우는 주기. 단위 ms, \ndefaultValue[10], min[1], max[2147483647]
project.sample_base2.client.asyn.read_selector_wakeup_interval.value=10
project.sample_base2.server.monitor.time_interval.desc=모니터링 주기, 단위 ms, \ndefaultValue[5000], min[1000], max[2147483647]
project.sample_base2.server.monitor.time_interval.value=5000
project.sample_base2.server.monitor.reception_timeout.desc=데이터를 수신하지 않고 기다려주는 최대 시간, 권장 값은 소켓 타임 아웃 시간*2, 단위 ms, \ndefaultValue[20000], min[1000], max[2147483647]
project.sample_base2.server.monitor.reception_timeout.value=20000
project.sample_base2.server.max_clients.desc=서버로 접속할 수 있는 최대 클라이언트 수, \ndefaultValue[5], min[1], max[2147483647]
project.sample_base2.server.max_clients.value=5
project.sample_base2.server.data_packet_buffer_cnt.desc=서버 프로젝트가 가지는 데이터 패킷 버퍼 수, \ndefaultValue[1000], min[1], max[2147483647]
project.sample_base2.server.data_packet_buffer_cnt.value=1000
project.sample_base2.server.pool.accept_queue_size.desc=접속 승인 큐 크기, \ndefaultValue[10], min[10], max[2147483647]
project.sample_base2.server.pool.accept_queue_size.value=10
project.sample_base2.server.pool.input_message_queue_size.desc=입력 메시지 큐 크기, \ndefaultValue[10], min[10], max[2147483647]
project.sample_base2.server.pool.input_message_queue_size.value=10
project.sample_base2.server.pool.output_message_queue_size.desc=출력 메시지 큐 크기, \ndefaultValue[10], min[10], max[2147483647]
project.sample_base2.server.pool.output_message_queue_size.value=10
project.sample_base2.server.accept_selector_timeout.desc=접속 이벤트 전용 selector 에서 접속 이벤트 최대 대기 시간, 단위 ms, \ndefaultValue[10], min[10], max[2147483647]
project.sample_base2.server.accept_selector_timeout.value=10
project.sample_base2.server.pool.read_selector_wakeup_interval.desc=입력 메시지 소켓 읽기 담당 쓰레드에서 블락된 읽기 이벤트 전용 selector 를 깨우는 주기. 단위 ms, \ndefaultValue[10], min[10], max[2147483647]
project.sample_base2.server.pool.read_selector_wakeup_interval.value=10
project.sample_base2.server.pool.accept_processor.max_size.desc=접속 요청이 승락된 클라이언트의 등록을 담당하는 쓰레드 최대 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.accept_processor.max_size.value=1
project.sample_base2.server.pool.accept_processor.size.desc=접속 요청이 승락된 클라이언트의 등록을 담당하는 쓰레드 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.accept_processor.size.value=1
project.sample_base2.server.pool.executor_processor.max_size.desc=서버 비지니스 로직 수행 담당 쓰레드 최대 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.executor_processor.max_size.value=1
project.sample_base2.server.pool.executor_processor.size.desc=서버 비지니스 로직 수행 담당 쓰레드 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.executor_processor.size.value=1
project.sample_base2.server.pool.input_message_reader.max_size.desc=입력 메시지 소켓 읽기 담당 쓰레드 최대 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.input_message_reader.max_size.value=1
project.sample_base2.server.pool.input_message_reader.size.desc=입력 메시지 소켓 읽기 담당 쓰레드 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.input_message_reader.size.value=1
project.sample_base2.server.pool.output_message_writer.max_size.desc=출력 메시지 소켓 쓰기 담당 쓰레드 최대 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.output_message_writer.max_size.value=1
project.sample_base2.server.pool.output_message_writer.size.desc=출력 메시지 소켓 쓰기 담당 쓰레드 갯수, \ndefaultValue[1], min[1], max[2147483647]
project.sample_base2.server.pool.output_message_writer.size.value=1
project.sample_base2.server.classloader.appinf.path.desc=서버 동적 클래스 APP-INF 경로, \ndefaultValue[D\:\\gitsinnori\\sinnori\\project\\sample_base2\\server_build\\APP-INF]
project.sample_base2.server.classloader.appinf.path.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/server_build/APP-INF
project.sample_base2.server.classloader.mybatis_config_file_relative_path.desc=ClassLoader\#getResourceAsStream 의 구현 이며 \n<APP-INF>/resources 경로 기준으로 읽어오며 구별자가 '/' 문자로된 상대 경로로 기술되어야 한다.\nex) kr/pe/sinnori/impl/mybatis/mybatisConfig.xml, \ndefaultValue[]
project.sample_base2.server.classloader.mybatis_config_file_relative_path.value=
sample_base2.common.message_info.xmlpath.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/impl/message/info
sample_base2.server.classloader.appinf.path.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/server_build/APP-INF
sample_base2.server.classloader.class.source.path.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/server_build/src
project.sample_base2.server.classloader.class.source.path.value=/home/madang01/gitsinnori/sinnori/project/sample_base2/server_build/src
