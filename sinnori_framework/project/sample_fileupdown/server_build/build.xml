<project name="sample_fileupdown_server" default="compile.impl" basedir=".">
	<description>
		샘플 파일 송수신 서버
	</description>
	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="corelib" location="corelib" />
	<property name="lib" location="lib" />
	<property name="framework.build" location="../../../core_build" />
	<property file="../ant.properties" />
	
	<condition property="is.windows.yes">
		<os family="windows" />
	</condition>
	<condition property="is.unix.yes">
		<os family="unix" />
	</condition>
	
	<condition property="java.debug.yes">
		<istrue value="${java.debug}" />
	</condition>
	
	<target name="java.debug.yes.init" if="java.debug.yes" description="framework with debug info">
		<property name="core.java.debug" value="debug" />
	</target>
	
	<target name="java.debug.no.init" unless="java.debug.yes" description="framework with no debug info">
		<property name="core.java.debug" value="nodebug" />
	</target>
	
	<target name="dos.init" if="is.windows.yes">
		<property name="weblib" location="${dos.weblib}" />
	</target>
	<target name="unix.init" if="is.unix.yes">
		<property name="weblib" location="${unix.weblib}" />
	</target>
	
	<target name="var.init" depends="java.debug.no.init, java.debug.yes.init, dos.init, unix.init" description="var init">
		<echo message="java.debug=${java.debug}, core.java.debug=${core.java.debug}" />
		<echo message="java.debug.yes=${java.debug.yes}" />
	</target>

	
	<target name="unix.make.core" if="is.unix.yes">
		<echo message="유니스 신놀이 프레임 워크 컴파일후 jar 만들기" />
		<exec dir="${framework.build}" executable="ant">
			<arg value="${core.java.debug}" />
		</exec>
	</target>
	
	<target name="dos.make.core" if="is.windows.yes">
		<echo message="도스 신놀이 프레임 워크 컴파일후 jar 만들기" />
		<exec dir="${framework.build}" executable="cmd">
			<arg value="/c" />
			<arg value="ant.bat" />
			<arg value="${core.java.debug}" />
		</exec>
	</target>

	<target name="make.core" depends="var.init, dos.make.core, unix.make.core" description="신놀이 프레임 워크 컴파일 하여 jar 라이브러리 만들기" />
	
	<target name="corelib.clean" depends="var.init">
		<delete dir="${corelib}" />
	</target>

	<target name="corelib.init" depends="corelib.clean">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${corelib}/ex" />
		<mkdir dir="${corelib}/in" />
	</target>
	
	<target name="copy" description="신놀이 프레임 워크 core copy" depends="corelib.init">
		<copy todir="${corelib}/in" verbose="true" overwrite="true">
			<fileset file="${framework.build}/dist/sinnori_framework.jar" />
		</copy>
		<copy todir="${corelib}/ex" verbose="true" overwrite="true">
			<fileset dir="${framework.build}/lib/ex/" />
		</copy>
	</target>
	
	<target name="sinnori" depends="make.core, copy" description="신놀이 프레임 워크 컴파일후 jar 만들어 가져오기">
		<echo message="신놀이 프레임 워크 컴파일 하여  jar 라이브러리 만들어 가져오기" />
	</target>

	<target name="libdir.init" depends="var.init">
		<mkdir dir="${corelib}/ex" />
		<mkdir dir="${corelib}/in" />
		<mkdir dir="${lib}/ex" />
		<mkdir dir="${lib}/in" />
	</target>
	
	<target name="clean" depends="libdir.init">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
	</target>
	
	<target name="init" depends="clean">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="compile.main" depends="init" description="서버 어플리케이션 메인 클래스 컴파일">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="${java.debug}" debuglevel="lines,vars,source" encoding="UTF-8" includeantruntime="false" srcdir="${src}/main" destdir="${build}">
			<classpath>
				<fileset dir="${corelib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${corelib}/in">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>


	<path id="build.classpath">
		<fileset dir="${basedir}">
			<include name="corelib/ex/*.jar"/>
			<include name="lib/ex/*.jar"/>
		</fileset>
	</path>

	<pathconvert property="manifest.classpath" pathsep=" ">
	  <path refid="build.classpath"/>
	  <mapper>
		<chainedmapper>
		   <flattenmapper/>
		   <globmapper from="*.jar" to="lib/*.jar"/>
		</chainedmapper>
	  </mapper>
	</pathconvert>

	<target name="make.main" depends="compile.main" description="서버 어플리케이션 메인 클래스 jar 만들기">
		<delete dir="${dist}" />		
		<mkdir dir="${dist}/lib" />
		
		<copy todir="${dist}/lib" verbose="true" overwrite="true">
			<fileset dir="${corelib}/ex" />
			<fileset dir="${lib}/ex" />
		</copy>
		
		<jar destfile="${dist}/SinnoriServerMain.jar" basedir="${build}">

			<include name="main/**" />

			<restrict>
				<name name="**/*.class" />
				<archives>
					<zips>
						<fileset dir="${corelib}/in" includes="**/*.jar" />
						<fileset dir="${lib}/in" includes="**/*.jar" />
					</zips>
				</archives>
			</restrict>
			<manifest>
				<attribute name="Main-Class" value="main.SinnoriServerMain" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
		</jar>
	</target>
	
	<target name="clean.impl">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}/impl" />
		<mkdir dir="${build}/impl" />
	</target>
	
	
	<target name="compile.impl" depends="libdir.init" description="오직 서버 비지니스 로직 컴파일만 수행">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="${java.debug}" debuglevel="lines,vars,source" encoding="UTF-8" includeantruntime="false" srcdir="${src}/impl" destdir="${build}">
			<classpath>
				<fileset dir="${corelib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${corelib}/in">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/ex">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib}/in">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
		<echo message="is.windows.yes=${is.windows.yes}, is.unix.yes=${is.unix.yes}, java.debug=${java.debug}" />
	</target>
	
	<target name="cleancompile" depends="clean.impl, compile.impl" description="청소후 서버 비지니스 로직 컴파일 수행" />
	
	
	<target name="all" depends="sinnori, make.main, compile.impl" description="only compile and then make jar">
		<echo message="is.windows.yes=${is.windows.yes}, is.unix.yes=${is.unix.yes}, java.debug=${java.debug}, core.java.debug=${core.java.debug}" />
	</target>

</project>

