## Sinnori Project[{}] Config File
#Wed Oct 22 20:19:26 KST 2014
jdbc.connection_uri.desc=jdbc connection url, 미 지정시 jdbc\:mysql\://localhost\:3306/sinnori.
jdbc.connection_uri.value=jdbc\:mysql\://localhost\:3306/sinnori
jdbc.db_user_name.desc=DB user name, 미 지정시 dbmadangse.
jdbc.db_user_name.value=dbmadangse
jdbc.db_user_password.desc=비밀번호
jdbc.db_user_password.value=1234
jdbc.driver_class_name.desc=JDBC driver class name, 미 지정시 com.mysql.jdbc.Driver.
jdbc.driver_class_name.value=com.mysql.jdbc.Driver
servlet_jsp.jdf_error_message_page.desc=JDF framework에서 에러 발생시 에러 내용을 보여주는 사용자 친화적인 화면을 전담할 jsp, 미 지정시 /errorMessagePage.jsp.
servlet_jsp.jdf_error_message_page.value=/errorMessagePage.jsp
servlet_jsp.jdf_login_page.desc=로그인 전용 처리 jsp, 미 지정시 /login.jsp.
servlet_jsp.jdf_login_page.value=/login.jsp
servlet_jsp.jdf_servlet_trace.desc=JDF framework에서 서블릿 경과시간 추적 여부, 미 지정시 true.
servlet_jsp.jdf_servlet_trace.set=true, false
servlet_jsp.jdf_servlet_trace.value=true
servlet_jsp.web_layout_control_page.desc=신놀이 웹의 레이아웃 컨트롤러 jsp, /PageJump.jsp.
servlet_jsp.web_layout_control_page.value=/PageJump.jsp
sessionkey.rsa_keypair_source.desc=세션키에 사용되는 공개키 키쌍 생성 방법(\=원천)로써 2가지가 있다. 미지정시 API, (1) API \: 자체 암호 lib 이용하여 RSA 키쌍 생성, (2) File \: 외부 파일를 읽어와서 RSA  키쌍을 생성
sessionkey.rsa_keypair_source.set=API, File
sessionkey.rsa_keypair_source.value=API
sessionkey.rsa_keypair_path.desc=세션키에 사용되는 공개키 키쌍 파일 경로,  세션키에 사용되는 공개키 키쌍 생성 방법이 File 일 경우에는 필수 항목.
sessionkey.rsa_keypair_path.value=/home/madang01/gitsinnori/sinnori_framework/project/sample_fileupdown/rsa_keypair
sessionkey.rsa_keysize.desc=세션키에 사용하는 공개키 크기, 단위 byte. 디폴트 1024
sessionkey.rsa_keysize.value=1024
sessionkey.symmetric_key_algorithm.desc=세션키에 사용되는 대칭키 알고리즘, 미 지정시 AES.
sessionkey.symmetric_key_algorithm.set=ASE, DESede, DES
sessionkey.symmetric_key_algorithm.value=AES
sessionkey.symmetric_key_size.desc=세션키에 사용되는 대칭키 크기, 단위 byte, 암호 강도 때문에 최소 8 byte 이상 요구, 미 지정시 16.
sessionkey.symmetric_key_size.value=16
sessionkey.iv_size.desc=세션키에 사용되는 대칭키와 같이 사용되는 IV 크기, 단위 byte, 최소 8 byte 이상 갖도록 함. 미 지정시 16.
sessionkey.iv_size.value=16
sessionkey.private_key.encoding.desc=개인키를 인코딩 방법, 미 지정시 NONE. 웹의 경우 이진데이터는 폼 전송이 불가하므로 base64 인코딩하여 전송한다.
sessionkey.private_key.encoding.set=NONE, BASE64
sessionkey.private_key.encoding.value=BASE64
sinnori_worker.running_mode.desc=신놀이 작업자 동작 모드
sinnori_worker.running_mode.set=client, server, all
sinnori_worker.running_mode.value=client
sinnori_worker.client.executor.prefix.value=impl.executor.client.
sinnori_worker.client.executor.suffix.value=CExtor
common.updownfile.local_source_file_resource_cnt.desc=로컬 원본 파일 자원 갯수, 미 지정시 10, 최소 5
common.updownfile.local_source_file_resource_cnt.value=10
common.updownfile.local_target_file_resource_cnt.desc=로컬 목적지 파일 자원 갯수, 미 지정시 10, 최소 5
common.updownfile.local_target_file_resource_cnt.value=10
common.updownfile.file_block_max_size.desc=파일 송수신 파일 블락 최대 크기, 최소값 1024, 1024의 배수, 기본값 1 Mbytes \= 1024*1024(\=1048576), 단위 byte.
common.updownfile.file_block_max_size.value=1048576
common.cached_object.max_size.desc=싱글턴 클래스 객체 캐쉬 관리자(LoaderAndName2ObjectManager) 에서 캐쉬로 관리할 객체의 최대 갯수. 주로 캐쉬되는 대상 객체는 xxxServerCodec, xxxClientCodec 이다.
common.cached_object.max_size.value=100
common.cached_object.max_update_seq_interval.desc=시간 개념의 객체 생성 순서를 갱신하는 최소 간격, 단위 ms.
common.cached_object.max_update_seq_interval.value=5000
common.projectlist.desc=프로젝트와 프로젝트 구분은 공백 없이 콤마로 한다.
common.projectlist.value=sample_fileupdown
sample_fileupdown.common.message_info.xmlpath.desc=메시지 정보 파일 경로, 필수 항목임.
sample_fileupdown.common.message_info.xmlpath.value=/home/madang01/gitsinnori/sinnori_framework/project/sample_fileupdown/impl/message/info
sample_fileupdown.common.host.desc=localhost, 172.30.1.15, 172.30.1.16, madang.sinnori.pe.kr
sample_fileupdown.common.host.value=madang.sinnori.pe.kr
sample_fileupdown.common.port.value=9090
sample_fileupdown.common.byteorder.set=BIG_ENDIAN, LITTLE_ENDIAN
sample_fileupdown.common.byteorder.value=LITTLE_ENDIAN
sample_fileupdown.common.charset.value=UTF-8
sample_fileupdown.common.data_packet_buffer_max_cnt_per_message.desc=1개 메시지당 할당 받을 수 있는 데이터 패킷 버퍼 최대수, 최소값은 2임
sample_fileupdown.common.data_packet_buffer_max_cnt_per_message.value=200
sample_fileupdown.common.data_packet_buffer_size.desc=데이터 패킷 버퍼 크기, 단위 byte, 30*1024+2048\=32768
sample_fileupdown.common.data_packet_buffer_size.value=4096
sample_fileupdown.common.message_id_fixed_size.desc=메시지 헤더에 사용되는 고정 크기 문자열인 메시지 식별자 크기, 단위 byte
sample_fileupdown.common.message_id_fixed_size.value=50
sample_fileupdown.common.message_protocol.desc=메시지 프로토콜
sample_fileupdown.common.message_protocol.set=DHB, DJSON, THB
sample_fileupdown.common.message_protocol.value=DHB
sample_fileupdown.common.classloader.class.package_prefix_name.value=kr.pe.sinnori.impl.
sample_fileupdown.client.monitor.time_interval.desc=모니터링 주기, 최소 1초, 기본 10초, 단위 ms.
sample_fileupdown.client.monitor.time_interval.value=5000
sample_fileupdown.client.monitor.request_timeout.desc=데이터를 송신하지 않고 기다려주는 최대 시간으로 이 시간 초과된 클라이언트는 소켓을 닫은다, 최소 소켓 타임 아웃 시간, 기본 소켓 타임 아웃 시간*2, 단위 ms.
sample_fileupdown.client.monitor.request_timeout.value=20000
sample_fileupdown.client.data_packet_buffer_cnt.desc=데이터 패킷 버퍼 수
sample_fileupdown.client.data_packet_buffer_cnt.value=1000
sample_fileupdown.client.connection.type.desc=연결 종류
sample_fileupdown.client.connection.type.set=NoShareAsyn(비공유+비동기), ShareAsyn(공유+비동기), NoShareSync(비공유+동기)
sample_fileupdown.client.connection.type.value=NoShareAsyn
sample_fileupdown.client.connection.count.desc=연결 클래스 갯수, 연결 클래스는 소켓 채널 랩 클래스로 소켓 채널 관련 서비스를 제공한다, 미 지정시 4.
sample_fileupdown.client.connection.count.value=2
sample_fileupdown.client.connection.socket_timeout.desc=소켓 타임 아웃 시간, 단위 ms, 미 지정시 5000 즉 5초 최소값 1000.
sample_fileupdown.client.connection.socket_timeout.value=5000
sample_fileupdown.client.connection.whether_to_auto_connect.desc=연결 생성시 자동 접속 여부
sample_fileupdown.client.connection.whether_to_auto_connect.set=true, false
sample_fileupdown.client.connection.whether_to_auto_connect.value=false
sample_fileupdown.client.asyn.finish_connect.max_call.desc=클라이언트 비동기 소켓 채널의 연결 확립 최대 시도 횟수, 최소 1 미 지정시 10.
sample_fileupdown.client.asyn.finish_connect.max_call.value=5
sample_fileupdown.client.asyn.finish_connect.waitting_time.desc=클라이언트 비동기 소켓 채널의 연결 확립을 재 시도 간격, 단위 ms, 최소 0 미 지정시 10
sample_fileupdown.client.asyn.finish_connect.waitting_time.value=10
sample_fileupdown.client.asyn.output_message_executor_thread_cnt.desc=비동기 출력 메시지 처리자 쓰레드 갯수, 최소1, 기본1. 주) 비동기 출력 메시지 처리자는 동일하며 지정한 수 만큼 쓰레드 수만큼 동작한다.
sample_fileupdown.client.asyn.output_message_executor_thread_cnt.value=1
sample_fileupdown.client.asyn.share.mailbox_cnt.desc=비동기+공유 연결 클래스(ShareAsynConnection)의 메일함 갯수, 최소 1 미 지정이면 2.
sample_fileupdown.client.asyn.share.mailbox_cnt.value=1
sample_fileupdown.client.asyn.input_message_queue_size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 큐 크기,  미 지정시 10.
sample_fileupdown.client.asyn.input_message_queue_size.value=10
sample_fileupdown.client.asyn.input_message_writer.max_size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 쓰기 담당 쓰레드 최대 갯수, 미 지정시 2.
sample_fileupdown.client.asyn.input_message_writer.max_size.value=4
sample_fileupdown.client.asyn.input_message_writer.size.desc=클라이언트 비동기 입출력 지원용 입력 메시지 소켓 쓰기 담당 쓰레드 초기 갯수, 미 지정시 2.
sample_fileupdown.client.asyn.input_message_writer.size.value=4
sample_fileupdown.client.asyn.output_message_queue_size.desc=출력 메시지 큐 크기, 미 지정시 10 최소값 1. 
sample_fileupdown.client.asyn.output_message_queue_size.value=10
sample_fileupdown.client.asyn.output_message_reader.max_size.desc=클라이언트 비동기 입출력 지원용 출력 메시지 소켓 읽기 담당 쓰레드 최대 갯수, 미 지정시 4 
sample_fileupdown.client.asyn.output_message_reader.max_size.value=4
sample_fileupdown.client.asyn.output_message_reader.size.desc=클라이언트 비동기 입출력 지원용 출력 메시지 소켓 읽기 담당 쓰레드 초기 갯수, 미 지정시 4
sample_fileupdown.client.asyn.output_message_reader.size.value=2
sample_fileupdown.client.asyn.read_selector_wakeup_interval.desc=클라이언트 비동기 입출력 지원용 출력 메시지 소켓 읽기 담당 쓰레드에서 블락된 읽기 이벤트 전용 selector 를 깨우는 주기. 단위 ms
sample_fileupdown.client.asyn.read_selector_wakeup_interval.value=10
sample_fileupdown.server.monitor.time_interval.desc=모니터링 주기, 최소 1초, 기본 10초, 단위 ms.
sample_fileupdown.server.monitor.time_interval.value=5000
sample_fileupdown.server.monitor.request_timeout.desc=데이터를 송신하지 않고 기다려주는 최대 시간으로 이 시간 초과된 클라이언트는 소켓을 닫은다, 최소 1초, 기본 10초, 단위 ms.
sample_fileupdown.server.monitor.request_timeout.value=20000
sample_fileupdown.server.asyn_inputmessage_set.desc=비동기 입력 메시지 집합, 비동기적 메시지 처리는 클라이언트랑 같이 움직여야 하므로 쌍방 합의되어야한다.
sample_fileupdown.server.asyn_inputmessage_set.value=UpFileData2, CancelUploadFile2, DownFileDataAll, CancelDownloadFile2
sample_fileupdown.server.max_clients.desc=서버로 접속할 수 있는 최대 클라이언트 수, 최소 1, 미 지정시 5
sample_fileupdown.server.max_clients.value=100
sample_fileupdown.server.data_packet_buffer_cnt.desc=데이터 패킷 버퍼 수
sample_fileupdown.server.data_packet_buffer_cnt.value=1000
sample_fileupdown.server.accept_selector_timeout.desc=접속 이벤트 전용 selector 에서 접속 이벤트 최대 대기 시간, 단위 ms, 최소 10, 미 지정시 10.
sample_fileupdown.server.accept_selector_timeout.value=10
sample_fileupdown.server.pool.accept_processor.max_size.desc=접속 요청이 승락된 클라이언트의 등록을 담당하는 쓰레드 최대 갯수, 최소 1 미 지정시 초기 갯수와 동일.
sample_fileupdown.server.pool.accept_processor.max_size.value=1
sample_fileupdown.server.pool.accept_processor.size.desc=접속 요청이 승락된 클라이언트의 등록을 담당하는 쓰레드 초기 갯수, 최소 1 미 지정시 1.
sample_fileupdown.server.pool.accept_processor.size.value=1
sample_fileupdown.server.pool.accept_queue_size.desc=접속 승인 큐 크기, 최소 1, 미 지정시 10.
sample_fileupdown.server.pool.accept_queue_size.value=10
sample_fileupdown.server.pool.executor_processor.max_size.desc=서버 비지니스 로직 수행 담당 쓰레드 최대 갯수, 최소 1 미 지정시 초기 갯수와 동일.
sample_fileupdown.server.pool.executor_processor.max_size.value=6
sample_fileupdown.server.pool.executor_processor.size.desc=서버 비지니스 로직 수행 담당 쓰레드 초기 갯수, 최소 1 미 지정시 3
sample_fileupdown.server.pool.executor_processor.size.value=6
sample_fileupdown.server.pool.input_message_queue_size.desc=입력 메시지 큐 크기, 최소 1, 미 지정시 10.
sample_fileupdown.server.pool.input_message_queue_size.value=10
sample_fileupdown.server.pool.input_message_reader.max_size.desc=입력 메시지 소켓 읽기 담당 쓰레드 최대 갯수, 최소 1 미 지정시 초기 갯수와 동일.
sample_fileupdown.server.pool.input_message_reader.max_size.value=2
sample_fileupdown.server.pool.input_message_reader.size.desc=입력 메시지 소켓 읽기 담당 쓰레드 초기 갯수, 최소 1 미 지정시 2.
sample_fileupdown.server.pool.input_message_reader.size.value=2
sample_fileupdown.server.pool.output_message_queue_size.desc=출력 메시지 큐 크기, 최소 1, 미 지정시 10.
sample_fileupdown.server.pool.output_message_queue_size.value=10
sample_fileupdown.server.pool.output_message_writer.max_size.desc=출력 메시지 소켓 쓰기 담당 쓰레드 최대 갯수, 최소 1 미 지정시 갯수와 동일.
sample_fileupdown.server.pool.output_message_writer.max_size.value=4
sample_fileupdown.server.pool.output_message_writer.size.desc=출력 메시지 소켓 쓰기 담당 쓰레드 초기 갯수, 최소 1 미 지정시 1.
sample_fileupdown.server.pool.output_message_writer.size.value=4
sample_fileupdown.server.pool.read_selector_wakeup_interval.desc=입력 메시지 소켓 읽기 담당 쓰레드에서 블락된 읽기 이벤트 전용 selector 를 깨우는 주기. 단위 ms, 최소 10, 미 지정시 10.  
sample_fileupdown.server.pool.read_selector_wakeup_interval.value=10
sample_fileupdown.server.mybatis.config_file_name.desc=mybatis 설정 파일 이름. SinnoriClassLoader.getResourceAsStream 통해서 접근된다.
sample_fileupdown.server.mybatis.config_file_name.value=kr/pe/sinnori/impl/mybatis/mybatisConfig.xml
sample_fileupdown.server.classloader.appinf.path.desc=서버 동적 클래스 APP-INF 경로
sample_fileupdown.server.classloader.appinf.path.value=/home/madang01/gitsinnori/sinnori_framework/project/sample_fileupdown/server_build/APP-INF
sample_fileupdown.server.classloader.class.source.path.desc=서버 동적 클래스 소스 파일들이 위치하는 기본 경로
sample_fileupdown.server.classloader.class.source.path.value=/home/madang01/gitsinnori/sinnori_framework/project/sample_fileupdown/server_build/src
