<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper

PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"

"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.pr.sinnori.testweb">
	<!--  아이디와 일치하는 회원 검색  -->
    <select id="getMemberByID" parameterType="String" resultType="hashmap">
select 
user_id as userId, 
nickname,
pwd_base64 as pwdBase64,
pwd_salt_base64 as pwdSaltBase64,
member_gb as memberGubun,
member_st as memberState,
pwd_hint as pwdHint,
pwd_answer as pwdAnswer,
pwd_fail_cnt as pwdFailCount,
reg_dt as registerDate,
mod_dt as modifiedDate
from TW_MEMBER_TB where user_id=#{userId}
    </select>
    
    <!-- 별명과 일치하는 회원 검색,  -->
    <select id="getMemeberByNickname" parameterType="String" resultType="hashmap">
select 
user_id as userId, 
nickname,
pwd_base64 as pwdBase64,
pwd_salt_base64 as pwdSaltBase64,
member_gb as memberGubun,
member_st as memberState,
pwd_hint as pwdHint,
pwd_answer as pwdAnswer,
pwd_fail_cnt as pwdFailCount,
reg_dt as registerDate,
mod_dt as modifiedDate
from TW_MEMBER_TB where nickname=#{nickname}
    </select>
    
	<!--  일반 회원 가입, status 0:정상, 1:탈퇴, member_gb 0:관리자, 1:일반회원, 2:불량회원 -->
	<insert id="insertMember" parameterType="hashmap">
        insert into TW_MEMBER_TB  
(`user_id`,
`nickname`,
`pwd_base64`,
`pwd_salt_base64`,
`member_gb`,
`member_st`,
`pwd_hint`,
`pwd_answer`,
`pwd_fail_cnt`,
`reg_dt`,
`mod_dt`) 
values(#{userId}, #{nickname}, #{pwdBase64}, #{pwdSaltBase64}, 1, 0, #{pwdHint}, #{pwdAnswer}, 0, sysdate(), reg_dt)
    </insert>

	<!--  일반 회원 혹은 불량 회원만 삭제, 관리자 제외. member_gb 0:관리자, 1:일반회원, 2:불량회원 -->
    <!--  >delete id="deleteMember" parameterType="java.lang.String">
        delete from member where userid=#{userId} and (member_gb=1 or member_gb=2)
    </delete -->

	   
    <!--  아이디와 일치하는 레코드에 읽기/쓰기 락을 거는 회원 검색, 로그인시 비밀번호 틀린 횟수를 1 증가시킬때 트랜잰션 처리를 위해 읽기/쓰기 락이 필요하다.  -->
    <select id="getMemberByIDInLock" parameterType="String" resultType="hashmap">
select 
user_id as userId, 
nickname,
pwd_base64 as pwdBase64,
pwd_salt_base64 as pwdSaltBase64,
member_gb as memberGubun,
member_st as memberState,
pwd_hint as pwdHint,
pwd_answer as pwdAnswer,
pwd_fail_cnt as pwdFailCount,
reg_dt as registerDate,
mod_dt as modifiedDate
from TW_MEMBER_TB where user_id=#{userId} for update
    </select>
    
    <!--  정상 상태인 일반 회원 로그인시 비밀번호 실패 카운터 설정, status 0:정상, 1:탈퇴, member_gb 0:관리자, 1:일반회원, 2:불량회원  -->
    <update id="updatePwdFailCnt" parameterType="hashmap">
        update TW_MEMBER_TB set pwd_fail_cnt=#{pwdFailCount}, mod_dt=sysdate() where user_id=#{userId} and member_gb=1 and member_st=0
    </update>
    
    <!--  정상 상태인 일반 혹은 관리자 회원 정보(비밀번호, 질문, 답변) 변경, status 0:정상, 1:탈퇴, member_gb 0:관리자, 1:일반회원, 2:불량회원  -->
    <update id="updateMemberInfo" parameterType="hashmap">
        update TW_MEMBER_TB set password=#{password}, pwd_question=#{pwdHint}, pwd_answer=#{pwdAnswer}, mod_dt=sysdate() where user_id=#{userId} and (member_gb=0 or member_gb=1) and member_st=0
    </update>
       
	    
    <!--    
    지정한 게시판에서 정상 상태인 회원들의 글 목록 가져오기
    게시판 종류 식별자(board.board_id) 1:공지 2:자유게시판
    회원상태(memberState) 0:정상, 1:블락, 2:탈퇴
    -->
    <select id="getTotalOfBoard" parameterType="kr.pe.sinnori.impl.message.BoardListInDTO.BoardListInDTO" resultType="int">
		select count(*) as total from TW_MEMBER_TB, TW_BOARD_TB where TW_BOARD_TB.board_id = #{boardId} 
and TW_MEMBER_TB.user_id = TW_BOARD_TB.writer_id and TW_MEMBER_TB.member_st = 0 
and TW_BOARD_TB.del_fl = 'N'
    </select>

	<resultMap id="boardMap" type="kr.pe.sinnori.impl.message.BoardListOutDTO.BoardListOutDTO$Board">
		<id property="boardNo" column="board_no" />
		<result  property="groupNo" column="group_no" />		
		<result  property="groupSeq" column="group_sq" />
		<result  property="parentNo" column="parent_no" />
		<result  property="depth" column="depth" />
		<result  property="subject" column="subject" />
		<result  property="writerId" column="writer_id" />
		<result  property="nickname" column="nickname" />
		<result  property="viewCount" column="view_cnt" />
		<result  property="votes" column="votes" />
		<result  property="deleteFlag" column="del_fl" />
		<result  property="registerDate" column="reg_dt" jdbcType="TIMESTAMP" />
		<result  property="modifiedDate" column="mod_dt" jdbcType="TIMESTAMP" />
		<result  property="memberGubunName" column="member_gb_nm" />
	</resultMap>
    
    <!-- mariadb sql 페이징 최적화, FIXME! resultSetType="SCROLL_SENSITIVE" 와 비교 필요함
    		resultSetType="SCROLL_SENSITIVE" 도입시		
			로직에서는 RowBounds rowBounds = new RowBounds(offset, limt) 생성후
			selectList("getBoardList", "hashmap", rowBounds) 로 호출 -->
    <select id="getBoardList" parameterType="kr.pe.sinnori.impl.message.BoardListInDTO.BoardListInDTO" resultMap="boardMap">
select 
t.*
from TW_BOARD_TB join 
(select 
board_no,
group_no,
group_sq,
parent_no,
depth,
subject,
writer_id,
view_cnt,
votes,
del_fl,
TW_BOARD_TB.reg_dt,
TW_BOARD_TB.mod_dt,
TW_MEMBER_TB.nickname, 
if (TW_MEMBER_TB.member_gb = 1, '일반회원', if (TW_MEMBER_TB.member_gb = 0, '관리자', '알수없음')) as member_gb_nm 
from TW_MEMBER_TB, TW_BOARD_TB where TW_BOARD_TB.board_id = #{boardId} 
and TW_MEMBER_TB.user_id = TW_BOARD_TB.writer_id and TW_MEMBER_TB.member_st = 0 
and TW_BOARD_TB.del_fl = 'N' ) as t on TW_BOARD_TB.board_no=t.board_no
order by TW_BOARD_TB.group_no desc, TW_BOARD_TB.group_sq asc 
limit #{startNo}, #{pageSize}
    </select>
	
	<resultMap id="boardListMap" type="kr.pe.sinnori.impl.message.BoardListOutDTO.BoardListOutDTO">
		<result property="boardId" column="boardId" javaType="long" />		
		<result property="startNo" column="startNo" javaType="int" />
		<result property="pageSize" column="pageSize" javaType="int" />
		<result property="total" column="total" javaType="int" />
		<collection property="boardList" column="{boardId=BOARDID,startNo=STARTNO,pageSize=PAGESIZE}" ofType="kr.pe.sinnori.impl.message.BoardListOutDTO.BoardListOutDTO$Board" select="getBoardList" />
	</resultMap>

	<select id="getBoardListMap" parameterType="kr.pe.sinnori.impl.message.BoardListInDTO.BoardListInDTO" resultMap="boardListMap">
		select 
#{boardId} as boardId,
#{startNo} as startNo,
#{pageSize} as pageSize,
count(*) as total
from TW_MEMBER_TB, TW_BOARD_TB where TW_BOARD_TB.board_id = #{boardId} 
	and TW_MEMBER_TB.user_id = TW_BOARD_TB.writer_id and TW_MEMBER_TB.member_st = 0 
	and TW_BOARD_TB.del_fl = 'N'
    </select>
	
	<resultMap id="boardDetailMap" type="kr.pe.sinnori.impl.message.BoardDetailOutDTO.BoardDetailOutDTO">
		<id property="boardNo" column="board_no" />
		<result  property="groupNo" column="group_no" />
		<result  property="groupSeq" column="group_sq" />		
		<result  property="parentNo" column="parent_no" />
		<result  property="depth" column="depth" />
		<result  property="subject" column="subject" />
		<result  property="content" column="content" />
		<result  property="writerId" column="writer_id" />
		<result  property="nickname" column="nickname" />
		<result  property="viewCount" column="view_cnt" />
		<result  property="votes" column="votes" />
		<result  property="deleteFlag" column="del_fl" />
		<result  property="ip" column="ip" />
		<result  property="registerDate" column="reg_dt" jdbcType="TIMESTAMP" />
		<result  property="modifiedDate" column="mod_dt" jdbcType="TIMESTAMP" />
		<result  property="memberGubunName" column="member_gb_nm" />
		<result  property="memberState" column="member_st" />
	</resultMap>
	    
    <!-- 게시글 상세 보기, 회원상태(memberState) 0:정상, 1:블락, 2:탈퇴 -->
    <select id="getBoardDetail" parameterType="long" resultMap="boardDetailMap">
select 
	board_no,
	group_no,
	parent_no,
	group_sq,
	depth,
	subject,
	contents,
	writer_id,
	TW_MEMBER_TB.nickname,
	view_cnt,
	votes,
	del_fl, 
	ip,
	TW_BOARD_TB.reg_dt,
	TW_BOARD_TB.mod_dt,
	if (TW_MEMBER_TB.member_gb = 1, '일반회원', if (TW_MEMBER_TB.member_gb = 0, '관리자', '알수없음')) as member_gb_nm,
	TW_MEMBER_TB.member_st
from TW_BOARD_TB, TW_MEMBER_TB 
where board_no = #{boardNo} and TW_MEMBER_TB.user_id = TW_BOARD_TB.writer_id
    </select>


	<!-- 게시글 수정전 게시글 작성자 본인 확인을 위한 조회 -->
	<select id="getBoardWriterInLock" parameterType="kr.pe.sinnori.impl.message.BoardModifyInDTO.BoardModifyInDTO" resultType="String">
select 
	writer_id 
from TW_BOARD_TB 
where board_no=#{boardNo} for update
    </select>

	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="kr.pe.sinnori.impl.message.BoardModifyInDTO.BoardModifyInDTO">
update TW_BOARD_TB set subject=#{subject}, content=#{content}, ip=#{ip}, mod_dt=sysdate() where board_no=#{boardNo}
	</update>
    
    <!--  부모글 없는 최상위 글 등록 -->
    <insert id="insertRootBoard" parameterType="kr.pe.sinnori.impl.message.BoardWriteInDTO.BoardWriteInDTO">
 INSERT INTO `SINNORIDB`.`TW_BOARD_TB`
(`board_no`,
`group_no`,
`group_sq`,
`parent_no`,
`depth`,
`board_id`,
`subject`,
`content`,
`writer_id`,
`view_cnt`,
`votes`,
`del_fl`,
`ip`,
`reg_dt`,
`mod_dt`)
VALUES
(0,
0,
1,
0,
0,
#{boardId},
#{subject},
#{content},
#{writerId},
0,
0,
'N',
#{ip}, 
sysdate(),
reg_dt)
	</insert>

	<!-- 부모글 없는 최상위 글 등록후 자동 증가값인 board_no 값을 얻어 group_no 값 수정 -->
	<update id="updateBoardGropNo" parameterType="kr.pe.sinnori.impl.message.BoardWriteInDTO.BoardWriteInDTO">
update TW_BOARD_TB set group_no=board_no where board_no=LAST_INSERT_ID()
	</update>

	<resultMap id="boardReplyMap" type="kr.pe.sinnori.impl.message.BoardReplyDTO.BoardReplyDTO">
		<result  property="groupNo" column="group_no" />
		<result  property="groupSeq" column="group_sq" />		
		<result  property="parentBoardNo" column="board_no" />
		<result  property="depth" column="depth" />
		<result  property="boardId" column="board_id" />
		<!-- result  property="subject" column="subject" />
		<result  property="content" column="content" />
		<result  property="writerId" column="writer_id" />
		<result  property="ip" column="ip" / -->
	</resultMap>
	
	<!-- 댓글 등록전 부모글 조회 -->
<!-- , #{subject} as subject, #{content} as content, #{writerId} as write_id, #{ip} as ip -->
	<select id="getBoardReplyInLock" parameterType="kr.pe.sinnori.impl.message.BoardReplyRequest.BoardReplyRequest" resultMap="boardReplyMap">
select 
	board_no, group_no, (group_sq + 1) as group_sq, (depth + 1) as depth, board_id	
from TW_BOARD_TB 
where board_no=#{parentBoardNo} for update
    </select>

	<!--  댓글 등록시 삽입하고자 하는 위치 이후 seq 모두 업데이트 락  -->
    <select id="getBoardListByGroupAndSeqInLock" parameterType="kr.pe.sinnori.impl.message.BoardReplyDTO.BoardReplyDTO" resultType="hashmap">
select
board_no,
group_no,
parent_no,
group_sq,
depth,
board_id,
subject,
content,
writer_id,
view_cnt,
votes,
del_fl,
reg_dt,
mod_dt
from TW_BOARD_TB where group_no=#{groupNo} and group_sq >= #{groupSeq} for update
    </select>
    
    <!--  댓글 등록시 삽입하고자 하는 위치 이후 seq 모두 업데이트 -->
	<update id="updateReplyBoard" parameterType="kr.pe.sinnori.impl.message.BoardReplyDTO.BoardReplyDTO">
        update TW_BOARD_TB set group_sq=group_sq+1 where group_no=#{groupNo} and group_sq >= #{groupSeq}
    </update>
    
	<!--  댓글 등록 -->
    <insert id="insertReplyBoard" parameterType="kr.pe.sinnori.impl.message.BoardReplyDTO.BoardReplyDTO">    
 INSERT INTO `SINNORIDB`.`TW_BOARD_TB`
(`board_no`,
`group_no`,
`group_sq`,
`parent_no`,
`depth`,
`board_id`,
`subject`,
`content`,
`writer_id`,
`view_cnt`,
`votes`,
`del_fl`,
`ip`,
`reg_dt`,
`mod_dt`)
VALUES
(0,
#{groupNo},
#{groupSeq},
#{parentBoardNo},
#{depth},
#{boardId},
#{subject},
#{content},
#{writerId},
0,
0,
'N',
#{ip},
sysdate(),
reg_dt)
	</insert>
    
    
</mapper>
