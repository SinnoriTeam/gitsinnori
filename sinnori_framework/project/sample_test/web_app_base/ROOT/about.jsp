<%@ page language="java" session="true" autoFlush="true" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<h1>신놀이 프레임워크</h1>
<ol>
<li>
	<dl>
		<dt>신놀이 프레임워크란?</dt>
			<dd> "신놀이" 이름은 "신명나게 놀아 보자" 라는 뜻입니다.<br/>
			신놀이 프레임워크는 서버/클라이언트 응용프로그램을 만들수 있도록 도와주는 도구입니다. <br/>
			신놀이 프레임워크 목표는 개발자가 메시지와 비지니스 로직에 전념할 수 있는 환경을 제공하여 <br/>
			응용 프로그램을 빠르게 구축시키는데 있습니다.<br/><br/>

			신놀이 개발 모델은 함수로 입력을 넣으면 비지니스 로직을 수행후 결과를 반환합니다.<br/><br/>
			(1) 동기 메시지 함수(동기 입력메시지) {<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;비지니스 로직 수행<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;return 동기 출력 메시지<br/>
			}<br/> 
			(2) 비동기 메시지 함수(비동기 입력메시지) {<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;비지니스 로직 수행<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;return 비동기 출력 메시지(들)<br/>
			}<br/><br/> 
			
			신놀이 프레임워크는 자바언어로 구현한 개발 프레임워크로 <br/>
			아래 2가지 요소(신놀이 서버, 클라이언트 서버 접속 라이브러리)로 구성되어 있습니다.<br/>&nbsp;
			</dd>
	</dl>
	<ol>
	<li>
	<dl>
		<dt>신놀이 서버</dt>
		<dd>한빛미디어 김성박/송지훈님의 "자바 I/O & NIO 네트워크 프로그래밍" 에서 소개한 AdvancedChatServer 기반으로 만들었습니다.</dd>
	</dl>
	</li>
	<li>
	<dl>
		<dt>서버 접속용 클라이언트 라이브러리</dt>
		<dd>신놀이 서버에 연결하여 메세지를 주고 받을 수 있는 클라이언트 라이브러리<br/>
		현재 자바 신놀이 클라이언트 라이브러리만 제공된다.<br/>
		연결 폴의 종류는 3가지이며 그중 하나는 다른 사용자와 소캣 자원을 공유하는 방법을 제공하는것이 특색이다.</dd>
	</dl>
		<ol>
			<li><dl>
		<dt>신놀이 자바-클라이언트 라이브러리</dt>
		<dd>자바 언어로 만든 비동기 통신방식으로 신놀이 서버와 연결하는 신놀이 클라이언트 라이브러리이다.</dd>
	</dl></li>
		</ol>
	</li>
	</ol>
	
</li>
<br/>
<li>
	<dl>
		<dt>개발한것을 아파치 라이센스 2.0 으로 공개하는 특별한 이유?</dt>
		<dd>개인적으로 자유 소프트웨어 진영에 공헌을 하고 싶고<br/>
		상용으로도 유용하게 사용했으면 하기에 아파치 라이센스 2.0 을 선택하였습니다.
		</dd>
	</dl>
</li>
<br/>
<li>
	<dl>
		<dt>개발을 하게된 동기및 목표</dt>
		<dd>신놀이 프레임 워크 개발 동기는 윷놀이 서버/클라이언트 게임을 만들고자 시작되었습니다. <br/>
		처음엔 공개된 프레임 워크를 통하면 쉽게 만들수있겠지라는 안일한 생각을 가지고 시작했습니다.<br/>
		이러 저러한 메시지를 이렇게 저렇게 교환을 하면 되겠다.<br/>
		DB table 을 만들었고 서버와 클라이언트 사이에서 주고받을 메시지를 정의했습니다.<br/>
		공개용 프로그램중 제가 찾은 유사한 형태는<br/>
		Apache Mina(or Apache Netty) + Google protocol buffer 입니다.<br/>
		제가 만든 신놀이와 가장 큰 차이점은 <br/>
		Apache Mina(or Apache Netty) + Google protocol buffer 는<br/>
		유화물감+다양한 종류의 붓+ 깨끗한 종이이며,<br/>
		신놀이는 밑그림 그려진 종이에 크레용으로 색칠만 하는 된다는 점입니다.<br/>
		이런 차이가 있는것은 저의 servlet/jsp 개발자 경력과 무관하지 않습니다.<br/>
		예를 들면 tomcat  만 설치되면 servlet 은 설정파일때문에 번거롭지만<br/>
		jsp 는 변경된 내용이 바로 바로 웹 브라우저를 통해서 확인 할 수 있습니다.<br/>
		신놀이를  이용한 개발시<br/>		
		서버 개발자는 클라이언트 개발자랑 의논해서 IO 를 정의한후<br/>
		IO 에 맞추어서 입력/출력 메시지를 만들거나 혹은<br/>
		클라이언트 개발자가 만든 입력/출력 메시지를 공유한후<br/>
		입력 메시지 1:1 대응하는 서버 비지니스 로직만 작성하면 되고,<br/>
		클라이언트 개발자는 서버 개발자랑 의논하여 IO 를 정의한후<br/>
		IO 에 맞추어서 신놀이 입력/출력메시지를 만들거나 <br/>
		혹은 서버 개발자가만든것을 공유한후 <br/>
		입력 메시지를 서버로 보내어 출력 메시지를 얻어 클라이언트 로직을 작성하면 됩니다.
		</dd>
	</dl>
</li>
</ol>
