<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="codda_core_all">
    <property environment="env"/>
    <property name="core_common_main_src.link" value="../common/src/main/java"/>
    <property name="core_common_test_src.link" value="../common/src/test/java"/>
    <property name="core_all_test_src.link" value="src/test/java"/>
    <property name="core_client_main_src.link" value="../client/src/main/java"/>
    <property name="core_server_main_src.link" value="../server/src/main/java"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="../common/lib/test/junit-4.12.jar"/>
        <pathelement location="../common/lib/test/hamcrest-core-1.3.jar"/>
    </path>
    <path id="codda_core_all.classpath">
        <pathelement location="bin"/>
        <pathelement location="../server/lib/main/ex/commons-dbcp2-2.0.1.jar"/>
        <pathelement location="../server/lib/main/ex/commons-pool2-2.5.0.jar"/>
        <pathelement location="../common/lib/test/commons-exec-1.3.jar"/>
        <path refid="JUnit 4.libraryclasspath"/>
        <pathelement location="../common/lib/test/byte-buddy-1.7.9.jar"/>
        <pathelement location="../common/lib/test/byte-buddy-agent-1.7.9.jar"/>
        <pathelement location="../common/lib/test/mockito-core-2.13.4.jar"/>
        <pathelement location="../common/lib/test/objenesis-2.6.jar"/>
        <pathelement location="../logger/lib/ex/jcl-over-slf4j-1.7.25.jar"/>
        <pathelement location="../logger/lib/ex/logback-classic-1.2.3.jar"/>
        <pathelement location="../logger/lib/ex/logback-core-1.2.3.jar"/>
        <pathelement location="../logger/lib/ex/slf4j-api-1.7.25.jar"/>
        <pathelement location="../logger/dist/codda-logger.jar"/>
        <pathelement location="../common/dist/codda-core-junitlib.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${core_common_main_src.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${core_common_test_src.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${core_all_test_src.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${core_client_main_src.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${core_server_main_src.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="${core_common_main_src.link}"/>
            <src path="${core_common_test_src.link}"/>
            <src path="${core_all_test_src.link}"/>
            <src path="${core_client_main_src.link}"/>
            <src path="${core_server_main_src.link}"/>
            <classpath refid="codda_core_all.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="AnyProjectConnectionPoolTest.testCreateAsynThreadSafeConnection_연결타입이_동기로_설정되어_NotSupportedException을던지는지검사">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.AnyProjectConnectionPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ArrayInfoTest.testConstructor_배열크기직접입력방식_문자인배열크기">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.ArrayInfoTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest.testSendAsynInputMessage_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest.testSendAsynInputMessage_threadSafeOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest.testSendSyncInputMessage_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest.testSendSyncInputMessage_singleThreadOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynNoShareConnectionTest.testSendSyncInputMessage_threadSafeOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.noshare.AsynNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendAsynInputMessage_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendAsynInputMessage_singleThreadOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendAsynInputMessage_threadSafeOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendSyncInputMessage_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendSyncInputMessage_singleThreadOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynShareConnectionTest.testSendSyncInputMessage_threadSafeOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.share.AsynShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynThreadSafeSingleConnectionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.AsynThreadSafeSingleConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynThreadSafeSingleConnectionTest.testSendSyncInputMessage_threadSafeOK">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.AsynThreadSafeSingleConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="AsynThreadSafeSingleConnectionTest.testSendSyncInputMessage_thread_safe_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.asyn.AsynThreadSafeSingleConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="Base64Test.testGetEncoder_입력데이터없는경우">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.java.util.Base64Test" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="CoddaConfigurationManagerTest.testGetInstance (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.config.CoddaConfigurationManagerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="CommonStaticUtilTest.testSpeedWithCharArray">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.util.CommonStaticUtilTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="CommonStaticUtilTest.testSpeedWithRegular">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.util.CommonStaticUtilTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ConnectionPoolManagerTest.testGetPoolState (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.ConnectionPoolManagerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="DHBMessageProtocolTest.testM2S_basic (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.protocol.dhb.DHBMessageProtocolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="DHBMessageProtocolTest.testS2MList_시간측정">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.protocol.dhb.DHBMessageProtocolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeInputStreamTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeInputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeInputStreamTest.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeInputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeInputStreamTest.test2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeInputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutByte_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutInt_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutLong_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutShort_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutUnsignedByte_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutUnsignedInt_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="FreeSizeOutputStreamTest.testPutUnsignedShort_minMaxMiddle (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.FreeSizeOutputStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="IOPartDynamicClassFileContentsBuilderManagerTest (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.IOPartDynamicClassFileContentsBuilderManagerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="IOPartDynamicClassFileContentsBuilderManagerTest.test_설치경로에있는임시디렉토리에메시지정보파일로부터메시지IO관련파일만들기 (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.IOPartDynamicClassFileContentsBuilderManagerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="IOPartDynamicClassNameUtilTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.classloader.IOPartDynamicClassNameUtilTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="IOPartDynamicClassNameUtilTest.testAllIOPartDynamicClassFullNameIsValid (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.classloader.IOPartDynamicClassNameUtilTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ProjectBuildSytemPathSupporterTest.testGetProjectEmailPropertiesFilePathString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.buildsystem.pathsupporter.ProjectBuildSytemPathSupporterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testCutMessageInputStreamFromStartingPosition_basic">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testCutMessageInputStreamFromStartingPosition_complex">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testCutReceivedDataStream_basic">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testCutReceivedDataStream_랜덤">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testetBytes_단순값비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testetBytes_수동비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetByte_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetInt_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetLong_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetMD5WithoutChange_getMD5_속도비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetMD5WithoutChange_전체">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetMD5_전체">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetShort_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetUnsignedByte_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetUnsignedInt_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testGetUnsignedShort_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testMark">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testMark_중간">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testMark_처음">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testMD5">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testMD5_전체">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testReadByte_minMaxMiddle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.testSkip">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_속도비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_잔존데이터복사방법속도비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_잔존데이터복사방법속도비교1">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_잔존데이터복사방법속도비교2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_잔존데이터복사방법속도비교_메모리복사와1byte씩복사">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ReceivedDataStreamTest.test_잔존데이터복사속도비교">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.io.ReceivedDataStreamTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testAddTask_greaterThanTheParameterPoolMaxSize (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testAddTask_ok">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterInputMessageQueueSize_lessThanOne">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterMessageProtocol_null">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterPoolMaxSize_lessThanOne">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterPoolSizeIsGreaterThanTheParameterPoolMaxSize">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterPoolSize_lessThanOne">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterProjectLoginManager_null">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterProjectName_null">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_theParameterServerObjectCacheManager_null">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testConstructor_TheRealPoolSizeIsSameToTheParameterPoolSize">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerExecutorPoolTest.testGetExecutorWithMinimumNumberOfSockets (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.threadpool.executor.ServerExecutorPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testConstructor">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testConstructor_DynamicClassCallException예외던지기">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testConstructor_NullPointerException예외던지기">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testConstructor_통제된에러">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testDoTask_2번이상동기출력메시지추가 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testDoTask_비동기방식으로지정된출력메시지를동기방식으로출력하고자함">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testDoTask_비동기입력메시지에도불구하고동기출력메시지를보내려고함">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToDecodeBody_통제된에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToDecodeBody_통제벗어난에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToGetMessageDecoder_통제된에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToGetMessageDecoder_통제벗어난에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToGetServerMessageCodec_통제된에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_failToGetServerMessageCodec_통제벗어난에러 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_출력메시지인코더얻기_통제된에러">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_출력메시지인코더얻기_통제벗어난에러">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_출력메시지인코더얻기실패">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="ServerTaskTest.testExecute_출력메시지인코딩_바디포맷에러">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.server.task.ServerTaskTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SimpleClassLoaderTest.testGetMessageXSLStr">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.classloader.SimpleClassLoaderTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SimpleClassLoaderTest.testGetResourceAsStream (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.classloader.SimpleClassLoaderTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemInfoTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemInfoTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemInfoTest.testConstructor_잘못된항목이름_한글자">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemInfoTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemTypeMangerTest.test (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemTypeMangerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemTypeMangerTest.testGetMesgXSLInputSream_메시지정보파일을스키마가지정된SAX파싱하기_OK">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemTypeMangerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemTypeMangerTest.testGetSingleItemType_sigleItemID를통해얻은SigleItemType맞는지검사 (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemTypeMangerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SingleItemTypeTest.test_ItemTypeID가정말로키가맞는지그리고0부터순차적으로할당되었는지에대한테스트 (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.message.builder.info.SingleItemTypeTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionPoolTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionPoolTest.testGetConnection_서버없이폴생성하여연결요구">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionPoolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionTest.testSendAsynInputMessage">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionTest.testSendSyncInputMessage">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncNoShareConnectionTest.testSendSyncInputMessage_singleThreadOk">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncNoShareConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncThreadSafeSingleConnectionTest.testSendSyncInputMessage">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncThreadSafeSingleConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="SyncThreadSafeSingleConnectionTest.testSendSyncInputMessage_threadSafeOK">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.client.connection.sync.SyncThreadSafeSingleConnectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="TestJooq">
        <java classname="kr.pe.codda.TestJooq" failonerror="true" fork="yes">
            <classpath refid="codda_core_all.classpath"/>
        </java>
    </target>
    <target name="THBMessageProtocolTest.testM2S_basic (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.protocol.thb.THBMessageProtocolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="THBMessageProtocolTest.testM2S_basic2 (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.protocol.thb.THBMessageProtocolTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="WebClientAntBuildXMLFileContenetsBuilderTest.testBuild_isEqualToSampleBaseWebClientAntBuildXMLFile (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="kr.pe.codda.common.buildsystem.WebClientAntBuildXMLFileContenetsBuilderTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="codda_core_all.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
